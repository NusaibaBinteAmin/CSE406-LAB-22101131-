def lru_page_replacement(pages, frame_count):
    frames = []              
    faults = 0                
    hits = 0                  
    last_used = {}           

    print("Reference String:", pages)
    print("Frame Size:", frame_count)
    print("\nExecution Process:\n")

    for index, page in enumerate(pages):
        if page not in frames:
        
            if len(frames) < frame_count:
                frames.append(page)
            else:
                lru = min(frames, key=lambda p: last_used[p])
                replace_index = frames.index(lru)
                frames[replace_index] = page

            faults += 1
            print(f"Step {index + 1}: Page {page} → Fault | Frames: {frames}")
        else:
            hits += 1
            print(f"Step {index + 1}: Page {page} → Hit   | Frames: {frames}")

        last_used[page] = index

    hit_ratio = (hits / len(pages)) * 100
    miss_ratio = 100 - hit_ratio

    print("\nSummary:")
    print(f"Total Page Faults: {faults}")
    print(f"Total Page Hits: {hits}")
    print(f"Hit Ratio: {hit_ratio:.2f}%")
    print(f"Miss Ratio: {miss_ratio:.2f}%")
    print("Final Frame Content:", frames)

pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0]
frame_count = int(input("Enter the frame size: "))

lru_page_replacement(pages, frame_count)
