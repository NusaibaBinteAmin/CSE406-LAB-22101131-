pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0] 
frame_size = int(input("Enter the frame size: "))

def lru_page_replacement(pages, frame_size):
    memory = []          
    page_faults = 0      
    page_hits = 0       
    recent_use = {}     

    print("Page Reference String:", pages)
    print("Frame Size:", frame_size)
    print("\nStep by Step Execution:\n")

    for i, page in enumerate(pages):
        if page not in memory:
           
            if len(memory) < frame_size:
                memory.append(page)
            else:
                
                lru_page = min(memory, key=lambda p: recent_use[p])
                memory[memory.index(lru_page)] = page

            page_faults += 1
            print(f"Step {i+1}: Page {page} -> Page Fault! Memory: {memory}")
        else:
            
            page_hits += 1
            print(f"Step {i+1}: Page {page} -> Hit! Memory: {memory}")

        
        recent_use[page] = i

   
    hit_rate = (page_hits / len(pages)) * 100

    print("\n")
    print("Total Page Faults:", page_faults)
    print("Total Page Hits:", page_hits)
    print(f"Hit Rate: {hit_rate:.2f}%")
    print("Final Memory State:", memory)
 

lru_page_replacement(pages, frame_size)

